import API from "../api";
import { is_real_number } from "./lib";

// Calculate slots and ammunition

/**
 *
 * @param {*} item
 * @returns {available:number, maximum:number|null, isAmmunition:boolean}
 */
function calculateUsesForItem(item): calculatedUsesData {
	const itemData = item.system;
	const consume = itemData.consume;
	if (consume && consume.target) {
		return calculateConsumeUses(item.actor, consume);
	}
	const uses = itemData.uses;
	if (uses && (uses.max > 0 || uses.value > 0)) {
		return calculateLimitedUses(itemData);
	}

	const itemType = item.type;
	if (itemType === "feat") {
		return calculateFeatUses(itemData);
	} else if (itemType === "consumable" || itemType === "loot") {
		return {
			available: itemData.quantity,
			maximum: null,
			isAmmunition: false,
		};
	} else if (itemType === "spell") {
		return calculateSpellUses(item);
	} else if (itemType === "weapon") {
		return calculateWeaponUses(itemData);
	}
	return {
		available: 0,
		maximum: null,
		isAmmunition: false,
	};
}

function calculateConsumeUses(actor, consume): calculatedUsesData {
	let available: number = 0;
	let maximum: number | null = null;
	if (consume.type === "attribute") {
		const value = getProperty(actor.system, consume.target);
		if (typeof value === "number") {
			available = value;
		} else {
			available = 0;
		}
	} else if (consume.type === "ammo" || consume.type === "material") {
		const targetItem = actor.items.get(consume.target);
		if (targetItem) {
			available = targetItem.system.quantity;
		} else {
			available = 0;
		}
	} else if (consume.type === "charges") {
		const targetItem = actor.items.get(consume.target);
		if (targetItem) {
			({ available, maximum } = calculateLimitedUses(targetItem.system));
		} else {
			available = 0;
		}
	}
	if (available !== null) {
		if (consume.amount > 1) {
			available = Math.floor(available / consume.amount);
			if (maximum !== null) {
				maximum = Math.floor(maximum / consume.amount);
			}
		}
		return {
			available: available,
			maximum: maximum,
			isAmmunition: true,
		};
	}
	return {
		available: 0,
		maximum: null,
		isAmmunition: false,
	};
}

function calculateLimitedUses(itemData): calculatedUsesData {
	let available: number = itemData.uses.value;
	let maximum: number | null = itemData.uses.max;
	const quantity: number = itemData.quantity;
	if (quantity) {
		if (maximum != null && maximum != undefined) {
			available = available + (quantity - 1) * maximum;
			maximum = maximum * quantity;
		} else {
			available = available + (quantity - 1);
			maximum = quantity;
		}
	}
	return {
		available: available,
		maximum: maximum,
		isAmmunition: false,
	};
}

function calculateFeatUses(itemData): calculatedUsesData {
	if (itemData.recharge && itemData.recharge.value) {
		return {
			available: itemData.recharge.charged ? 1 : 0,
			maximum: 1,
			isAmmunition: false,
		};
	}
	return {
		available: 0,
		maximum: null,
		isAmmunition: false,
	};
}

function calculateSpellUses(item): calculatedUsesData {
	const itemData = item.system;
	const actorData = item.actor.system;
	let available: number = 0;
	let maximum: number | null = null;
	const preparationMode = itemData.preparation.mode;
	if (preparationMode === "pact") {
		available = actorData.spells["pact"].value;
		maximum = actorData.spells["pact"].max;
	} else if (preparationMode === "innate" || preparationMode === "atwill") {
		// None
	} else {
		let level = itemData.level;
		if (level > 0) {
			available = actorData.spells["spell" + level].value;
			maximum = actorData.spells["spell" + level].max;
		}
	}
	if (available === null || available === undefined || available <= 0) {
		return {
			available: available,
			maximum: maximum,
			isAmmunition: false,
		};
	} else {
		return {
			available: available,
			maximum: maximum,
			isAmmunition: false,
		};
	}
}

function calculateWeaponUses(itemData): calculatedUsesData {
	// If the weapon is a thrown weapon, but not a returning weapon, show quantity
	if (itemData.properties.thr && !itemData.properties.ret) {
		return {
			available: itemData.quantity,
			maximum: null,
			isAmmunition: false,
		};
	}
	return {
		available: 0,
		maximum: null,
		isAmmunition: false,
	};
}


